{ code: '// from https://github.com/pgbovine/OnlinePythonTutor/issues/285\n// Step 9: "index shows as 3 in python tutor, but prints as -1 in // console.log()"\nconst baseRange = function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}\n//baseRange(1,4);\n//baseRange(1,4,2);\nbaseRange(4,1,-1);',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: {},
       ordered_globals: [],
       line: 3,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 18,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'end (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'step (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'index (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'length (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 5,
       col: 4,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'end (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'step (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'index (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'length (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 5,
       col: 9,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 4,
               'end (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'step (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'index (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'length (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 5,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 4,
               'end (block 1)': 1,
               'step (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'index (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'length (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 5,
       col: 21,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 4,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'length (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 6,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 4,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': -1,
               'length (block 1)': 3,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': 
           [ 'LIST',
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 4,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': -1,
               'length (block 1)': 3,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 10,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': 
           [ 'LIST',
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 4,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': -1,
               'length (block 1)': 2,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 11,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': 
           [ 'LIST',
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 4,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 0,
               'length (block 1)': 2,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 12,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': 
           [ 'LIST',
             4,
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 3,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 0,
               'length (block 1)': 2,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 10,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': 
           [ 'LIST',
             4,
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 3,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 0,
               'length (block 1)': 1,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 11,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': 
           [ 'LIST',
             4,
             [ 'JS_SPECIAL_VAL', 'undefined' ],
             [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 3,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 1,
               'length (block 1)': 1,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 12,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': [ 'LIST', 4, 3, [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 2,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 1,
               'length (block 1)': 1,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 10,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': [ 'LIST', 4, 3, [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 2,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 1,
               'length (block 1)': 0,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 11,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': [ 'LIST', 4, 3, [ 'JS_SPECIAL_VAL', 'undefined' ] ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 2,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 2,
               'length (block 1)': 0,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 12,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': [ 'LIST', 4, 3, 2 ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 1,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 2,
               'length (block 1)': 0,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 10,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': [ 'LIST', 4, 3, 2 ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: 
             [ 'arg',
               'start (block 1)',
               'end (block 1)',
               'step (block 1)',
               'index (block 1)',
               'length (block 1)',
               'result (block 1)' ],
            encoded_locals: 
             { arg: [ 'REF', 2 ],
               'start (block 1)': 1,
               'end (block 1)': 1,
               'step (block 1)': -1,
               'index (block 1)': 2,
               'length (block 1)': -1,
               'result (block 1)': [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 14,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': [ 'LIST', 4, 3, 2 ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f2',
            ordered_varnames: [ 'arg', '__return__' ],
            encoded_locals: { arg: [ 'REF', 2 ], __return__: [ 'REF', 3 ] } } ],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 14,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ],
          '2': [ 'LIST', 4, 1, -1 ],
          '3': [ 'LIST', 4, 3, 2 ] } },
     { stdout: 'index: -1\n',
       func_name: '',
       stack_to_render: [],
       globals: { baseRange: [ 'REF', 1 ] },
       ordered_globals: [ 'baseRange' ],
       line: 18,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             '',
             'function (...arg) {\n\n    let [start, end, step = 1] = arg;\n    let index = -1,\n        length = Math.ceil( (end -start) / step ),\n        result = Array(length);\n    console.log(\'index:\', index);\n    while ( length--) {\n        result[ ++index ] = start;\n        start += step;\n    }\n    return result;\n}',
             null,
             null ] } } ] }
