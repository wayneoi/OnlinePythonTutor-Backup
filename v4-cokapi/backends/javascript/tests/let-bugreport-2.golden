{ code: '// from https://github.com/pgbovine/OnlinePythonTutor/issues/283\n// step 14: "instead of having the result variable, there is n (block 1)"\nfunction multiply (arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}\n\nmultiply([2,3,4,5,6,7,8,9],4);',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 13,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 4 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 4,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 7,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 3 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 4,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 7,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 2 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 4,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 7,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 1 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 4,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 1,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 7,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 1,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f6',
            ordered_varnames: [ 'arr', 'n' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 0 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 4,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 1,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f6',
            ordered_varnames: [ 'arr', 'n' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 0 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 5,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 1,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f6',
            ordered_varnames: [ 'arr', 'n', '__return__' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 0, __return__: 2 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 5,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 1, 'result (block 1)': 6 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 8,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 1, 'result (block 1)': 6 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 2,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f5',
            ordered_varnames: [ 'arr', 'n', '__return__' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 1, __return__: 6 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 2, 'result (block 1)': 24 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 8,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 2, 'result (block 1)': 24 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 3,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f4',
            ordered_varnames: [ 'arr', 'n', '__return__' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 2, __return__: 24 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 3, 'result (block 1)': 120 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 8,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n120\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 3, 'result (block 1)': 120 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n120\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: 
             { arr: [ 'REF', 2 ],
               n: 4,
               'result (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } },
          { func_name: 'multiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f3',
            ordered_varnames: [ 'arr', 'n', '__return__' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 3, __return__: 120 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n120\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 4, 'result (block 1)': 720 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 8,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n120\n720\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', 'result (block 1)' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 4, 'result (block 1)': 720 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n120\n720\n',
       func_name: 'multiply',
       stack_to_render: 
        [ { func_name: 'multiply',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'multiply_f2',
            ordered_varnames: [ 'arr', 'n', '__return__' ],
            encoded_locals: { arr: [ 'REF', 2 ], n: 4, __return__: 720 } } ],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 9,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ],
          '2': [ 'LIST', 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '6\n24\n120\n720\n',
       func_name: '',
       stack_to_render: [],
       globals: { multiply: [ 'REF', 1 ] },
       ordered_globals: [ 'multiply' ],
       line: 13,
       col: 30,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'multiply',
             'function multiply(arr, n) {\n  if (n<=0) {\n    return arr[0];\n  } else {\n    let result = multiply(arr, n-1) * arr[n];\n    console.log(result);\n    return result;\n  }\n}',
             null,
             null ] } } ] }
