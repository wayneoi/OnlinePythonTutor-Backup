{ code: '// user bug report from: https://github.com/pgbovine/OnlinePythonTutor/issues/288\n// step 14: "rIdx is actually showing tmpResults. Everything seems to be one off."\nfunction stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}\n\nconsole.log(stringPermutations(\'cat\'));',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 27,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'JS_SPECIAL_VAL', 'undefined' ],
               results: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 4,
       col: 4,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 5,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 3 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 6,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 'a', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'tmpResults (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 7,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 'a', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 8,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 25,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 11,
       col: 12,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 0 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 6 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ],
          '6': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 6 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ],
          '6': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 6 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ] ],
          '6': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 1 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ] ],
          '6': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ] ],
          '6': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ] ],
          '6': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 7 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 7 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 7 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 4 ],
               'rIdx (block 4)': 2 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 25,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 19,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 5 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 6,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'tmpResults (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 7,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST', 't' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 8,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 25,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 11,
       col: 12,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 0 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 9 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ],
          '9': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 9 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST' ],
          '9': [ 'LIST', 't', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 9 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 1 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 10 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 10 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 10 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 2 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'REF', 11 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'REF', 11 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'REF', 11 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 6 ],
               'rIdx (block 4)': 3 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 25,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 11,
       col: 12,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 0 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 12 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 12 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': [ 'LIST', [ 'REF', 9 ], [ 'REF', 10 ], [ 'REF', 11 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 0,
               'tmp (block 5)': [ 'REF', 12 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 1 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 13 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 13 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 1,
               'tmp (block 5)': [ 'REF', 13 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 2 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 32,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'REF', 14 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 14,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'REF', 14 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 15,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)',
               'tmp (block 5)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 2,
               'tmp (block 5)': [ 'REF', 14 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 16,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)',
               'result (block 3)',
               'rIdx (block 4)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'result (block 3)': [ 'REF', 7 ],
               'rIdx (block 4)': 3 } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 12,
       col: 24,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)',
               'result (block 2)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ],
               'result (block 2)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 10,
       col: 25,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               'currLetter (block 1)': 't',
               'tmpResults (block 1)': [ 'REF', 8 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 19,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST', [ 'REF', 6 ], [ 'REF', 7 ] ],
          '6': [ 'LIST', 'a', 'c' ],
          '7': [ 'LIST', 'c', 'a' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 6,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 21,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f3',
            ordered_varnames: [ 'letterArray' ],
            encoded_locals: { letterArray: [ 'REF', 9 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 23,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f3',
            ordered_varnames: [ 'letterArray', '__return__' ],
            encoded_locals: { letterArray: [ 'REF', 9 ], __return__: 'tac' } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 45,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f4',
            ordered_varnames: [ 'letterArray' ],
            encoded_locals: { letterArray: [ 'REF', 10 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 23,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f4',
            ordered_varnames: [ 'letterArray', '__return__' ],
            encoded_locals: { letterArray: [ 'REF', 10 ], __return__: 'atc' } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 45,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f5',
            ordered_varnames: [ 'letterArray' ],
            encoded_locals: { letterArray: [ 'REF', 11 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 23,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f5',
            ordered_varnames: [ 'letterArray', '__return__' ],
            encoded_locals: { letterArray: [ 'REF', 11 ], __return__: 'act' } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 45,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f6',
            ordered_varnames: [ 'letterArray' ],
            encoded_locals: { letterArray: [ 'REF', 12 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 23,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f6',
            ordered_varnames: [ 'letterArray', '__return__' ],
            encoded_locals: { letterArray: [ 'REF', 12 ], __return__: 'tca' } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 45,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 7,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f7',
            ordered_varnames: [ 'letterArray' ],
            encoded_locals: { letterArray: [ 'REF', 13 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 23,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 7,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f7',
            ordered_varnames: [ 'letterArray', '__return__' ],
            encoded_locals: { letterArray: [ 'REF', 13 ], __return__: 'cta' } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 45,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 8,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f8',
            ordered_varnames: [ 'letterArray' ],
            encoded_locals: { letterArray: [ 'REF', 14 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 23,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 8,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f8',
            ordered_varnames: [ 'letterArray', '__return__' ],
            encoded_locals: { letterArray: [ 'REF', 14 ], __return__: 'cat' } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 22,
       col: 45,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 7,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 9,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f9',
            ordered_varnames: [ 'el', 'idx', 'self' ],
            encoded_locals: { el: 'tac', idx: 0, self: [ 'REF', 15 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 30,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 9,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f9',
            ordered_varnames: [ 'el', 'idx', 'self', '__return__' ],
            encoded_locals: 
             { el: 'tac',
               idx: 0,
               self: [ 'REF', 15 ],
               __return__: [ 'JS_SPECIAL_VAL', 'true' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 58,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 10,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f10',
            ordered_varnames: [ 'el', 'idx', 'self' ],
            encoded_locals: { el: 'atc', idx: 1, self: [ 'REF', 15 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 30,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 10,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f10',
            ordered_varnames: [ 'el', 'idx', 'self', '__return__' ],
            encoded_locals: 
             { el: 'atc',
               idx: 1,
               self: [ 'REF', 15 ],
               __return__: [ 'JS_SPECIAL_VAL', 'true' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 58,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 11,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f11',
            ordered_varnames: [ 'el', 'idx', 'self' ],
            encoded_locals: { el: 'act', idx: 2, self: [ 'REF', 15 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 30,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 11,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f11',
            ordered_varnames: [ 'el', 'idx', 'self', '__return__' ],
            encoded_locals: 
             { el: 'act',
               idx: 2,
               self: [ 'REF', 15 ],
               __return__: [ 'JS_SPECIAL_VAL', 'true' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 58,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 12,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f12',
            ordered_varnames: [ 'el', 'idx', 'self' ],
            encoded_locals: { el: 'tca', idx: 3, self: [ 'REF', 15 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 30,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 12,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f12',
            ordered_varnames: [ 'el', 'idx', 'self', '__return__' ],
            encoded_locals: 
             { el: 'tca',
               idx: 3,
               self: [ 'REF', 15 ],
               __return__: [ 'JS_SPECIAL_VAL', 'true' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 58,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 13,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f13',
            ordered_varnames: [ 'el', 'idx', 'self' ],
            encoded_locals: { el: 'cta', idx: 4, self: [ 'REF', 15 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 30,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 13,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f13',
            ordered_varnames: [ 'el', 'idx', 'self', '__return__' ],
            encoded_locals: 
             { el: 'cta',
               idx: 4,
               self: [ 'REF', 15 ],
               __return__: [ 'JS_SPECIAL_VAL', 'true' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 58,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 14,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f14',
            ordered_varnames: [ 'el', 'idx', 'self' ],
            encoded_locals: { el: 'cat', idx: 5, self: [ 'REF', 15 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 30,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } },
          { func_name: '',
            frame_id: 14,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f14',
            ordered_varnames: [ 'el', 'idx', 'self', '__return__' ],
            encoded_locals: 
             { el: 'cat',
               idx: 5,
               self: [ 'REF', 15 ],
               __return__: [ 'JS_SPECIAL_VAL', 'true' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 23,
       col: 58,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '15': [ 'LIST', 'tac', 'atc', 'act', 'tca', 'cta', 'cat' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'cat', letters: [ 'REF', 2 ], results: [ 'REF', 8 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 24,
       col: 7,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results', '__return__' ],
            encoded_locals: 
             { str: 'cat',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 8 ],
               __return__: [ 'REF', 16 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 24,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '8': 
           [ 'LIST',
             [ 'REF', 9 ],
             [ 'REF', 10 ],
             [ 'REF', 11 ],
             [ 'REF', 12 ],
             [ 'REF', 13 ],
             [ 'REF', 14 ] ],
          '9': [ 'LIST', 't', 'a', 'c' ],
          '10': [ 'LIST', 'a', 't', 'c' ],
          '11': [ 'LIST', 'a', 'c', 't' ],
          '12': [ 'LIST', 't', 'c', 'a' ],
          '13': [ 'LIST', 'c', 't', 'a' ],
          '14': [ 'LIST', 'c', 'a', 't' ],
          '16': [ 'LIST', 'act', 'atc', 'cat', 'cta', 'tac', 'tca' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 27,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ] } },
     { stdout: '[ \'act\', \'atc\', \'cat\', \'cta\', \'tac\', \'tca\' ]\n',
       func_name: '',
       stack_to_render: [],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 27,
       col: 39,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]] \n    while (letters.length) {\n        const currLetter = letters.shift()\n        let tmpResults = []\n        // results.forEach((result) => {\n        for(let result of results){\n            let rIdx = 0\n            while (rIdx <= result.length) {\n                const tmp = [...result]\n                tmp.splice(rIdx, 0, currLetter)\n                tmpResults.push(tmp)\n                rIdx++\n            }\n        }\n        results = tmpResults\n    }\n    return results\n      .map(letterArray => letterArray.join(\'\'))\n      .filter((el, idx, self) => (self.indexOf(el) === idx))\n      .sort()\n}',
             null,
             null ] } } ] }
