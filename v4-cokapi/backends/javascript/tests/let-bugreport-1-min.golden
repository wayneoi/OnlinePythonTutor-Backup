{ code: '// minimized form of let-bugreport-1.js\nfunction stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}\n\nstringPermutations(\'ca\');',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: 
             { str: 'ca',
               letters: [ 'JS_SPECIAL_VAL', 'undefined' ],
               results: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 3,
       col: 4,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: 
             { str: 'ca',
               letters: [ 'REF', 2 ],
               results: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 4,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ],
          '2': [ 'LIST', 'c', 'a' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'ca', letters: [ 'REF', 2 ], results: [ 'REF', 3 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 5,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ],
          '2': [ 'LIST', 'a' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'ca',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'tmpResults (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 7,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ],
          '2': [ 'LIST', 'a' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'ca',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 8,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: 
             [ 'str',
               'letters',
               'results',
               'currLetter (block 1)',
               'tmpResults (block 1)' ],
            encoded_locals: 
             { str: 'ca',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 3 ],
               'currLetter (block 1)': 'a',
               'tmpResults (block 1)': [ 'REF', 5 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 9,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '3': [ 'LIST', [ 'REF', 4 ] ],
          '4': [ 'LIST', 'c' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results' ],
            encoded_locals: { str: 'ca', letters: [ 'REF', 2 ], results: [ 'REF', 5 ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 5,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'stringPermutations',
       stack_to_render: 
        [ { func_name: 'stringPermutations',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'stringPermutations_f2',
            ordered_varnames: [ 'str', 'letters', 'results', '__return__' ],
            encoded_locals: 
             { str: 'ca',
               letters: [ 'REF', 2 ],
               results: [ 'REF', 5 ],
               __return__: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 5,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ],
          '2': [ 'LIST' ],
          '5': [ 'LIST' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { stringPermutations: [ 'REF', 1 ] },
       ordered_globals: [ 'stringPermutations' ],
       line: 13,
       col: 25,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'stringPermutations',
             'function stringPermutations(str) {\n    let letters = str.split(\'\');\n    let results = [[letters.shift()]]\n    while (letters.length) {\n        // in step 5 when you step into here, \'results\' is duplicated as \'results (block 1)\'\n        const currLetter = letters.shift()\n        let tmpResults = []\n        results = tmpResults\n    }\n}',
             null,
             null ] } } ] }
