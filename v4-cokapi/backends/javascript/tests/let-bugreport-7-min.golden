{ code: '// minimized form of let-bugreport-7.js\n//\n// well-actually make it a bit more complex since put both a global and\n// a local version so we can handle both cases ...\n\n// global version:\nlet cur = 42;\nfor (let i = 100; i < 101; i++) {\n  let aLetGlobal = 1234;\n  console.log(i);\n}\n\n// local version:\nfunction foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}\n\nfoo()',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { foo: [ 'REF', 1 ] },
       ordered_globals: [ 'foo' ],
       line: 7,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { foo: [ 'REF', 1 ],
          cur: 42,
          'i (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'foo', 'cur', 'i (block 1)' ],
       line: 8,
       col: 5,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { foo: [ 'REF', 1 ],
          cur: 42,
          'i (block 1)': 100,
          'i (block 2)': 100 },
       ordered_globals: [ 'foo', 'cur', 'i (block 1)', 'i (block 2)' ],
       line: 8,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { foo: [ 'REF', 1 ],
          cur: 42,
          'i (block 1)': 100,
          'i (block 2)': 100,
          'aLetGlobal (block 3)': [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: 
        [ 'foo',
          'cur',
          'i (block 1)',
          'i (block 2)',
          'aLetGlobal (block 3)' ],
       line: 9,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { foo: [ 'REF', 1 ],
          cur: 42,
          'i (block 1)': 100,
          'i (block 2)': 100,
          'aLetGlobal (block 3)': 1234 },
       ordered_globals: 
        [ 'foo',
          'cur',
          'i (block 1)',
          'i (block 2)',
          'aLetGlobal (block 3)' ],
       line: 10,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { foo: [ 'REF', 1 ],
          cur: 42,
          'i (block 1)': 100,
          'i (block 2)': 100 },
       ordered_globals: [ 'foo', 'cur', 'i (block 1)', 'i (block 2)' ],
       line: 8,
       col: 28,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { foo: [ 'REF', 1 ],
          cur: 42,
          'i (block 1)': 100,
          'i (block 2)': 101 },
       ordered_globals: [ 'foo', 'cur', 'i (block 1)', 'i (block 2)' ],
       line: 8,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: '',
       stack_to_render: [],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 22,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur' ],
            encoded_locals: { cur: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 15,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur', 'i (block 1)' ],
            encoded_locals: { cur: 42, 'i (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 16,
       col: 7,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur', 'i (block 1)', 'i (block 2)' ],
            encoded_locals: { cur: 42, 'i (block 1)': 200, 'i (block 2)': 200 } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 16,
       col: 22,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur', 'i (block 1)', 'i (block 2)', 'anotherLocal (block 3)' ],
            encoded_locals: 
             { cur: 42,
               'i (block 1)': 200,
               'i (block 2)': 200,
               'anotherLocal (block 3)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 17,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur', 'i (block 1)', 'i (block 2)', 'anotherLocal (block 3)' ],
            encoded_locals: 
             { cur: 42,
               'i (block 1)': 200,
               'i (block 2)': 200,
               'anotherLocal (block 3)': 4242 } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n200\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur', 'i (block 1)', 'i (block 2)' ],
            encoded_locals: { cur: 42, 'i (block 1)': 200, 'i (block 2)': 200 } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 16,
       col: 30,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n200\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur', 'i (block 1)', 'i (block 2)' ],
            encoded_locals: { cur: 42, 'i (block 1)': 200, 'i (block 2)': 201 } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 16,
       col: 22,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n200\n',
       func_name: 'foo',
       stack_to_render: 
        [ { func_name: 'foo',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'foo_f2',
            ordered_varnames: [ 'cur', '__return__' ],
            encoded_locals: { cur: 42, __return__: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 16,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } },
     { stdout: '100\n200\n',
       func_name: '',
       stack_to_render: [],
       globals: { foo: [ 'REF', 1 ], cur: 42 },
       ordered_globals: [ 'foo', 'cur' ],
       line: 22,
       col: 5,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n  let cur = 42;\n  for (let i = 200; i < 201; i++) {\n    let anotherLocal = 4242;\n    console.log(i);\n  }\n}',
             null,
             null ] } } ] }
