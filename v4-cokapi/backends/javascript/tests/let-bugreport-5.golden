{ code: '// from https://github.com/pgbovine/OnlinePythonTutor/issues/251\n// "I don\'t know what "trie (block 1)" is (it looks like it might be a\n// duplicate of "i (block 2)"), "i (block 2)" should be named "i", "i\n// (block 3)" should be named "node", "node (block 3)" should be named\n// "starting", and "starting (block 4)" should be named "char". I don\'t\n// know where all these "(block #)" are coming from..."\nfunction buildTrie (text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}\n\nbuildTrie(\'what\');',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 27,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie' ],
            encoded_locals: { text: 'what', trie: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 8,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie' ],
            encoded_locals: { text: 'what', trie: [ 'REF', 2 ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 9,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie', 'i (block 1)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 11,
       col: 7,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie', 'i (block 1)', 'i (block 2)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 11,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'JS_SPECIAL_VAL', 'undefined' ],
               'starting (block 3)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 12,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'REF', 2 ],
               'starting (block 3)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 13,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'REF', 2 ],
               'starting (block 3)': 0 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 15,
       col: 57,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'REF', 2 ],
               'starting (block 3)': 0,
               'char (block 4)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 16,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'REF', 2 ],
               'starting (block 3)': 0,
               'char (block 4)': 'w' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 17,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'REF', 2 ],
               'starting (block 3)': 0,
               'char (block 4)': 'w' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 18,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 4 ] ] ],
          '4': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'REF', 2 ],
               'starting (block 3)': 0,
               'char (block 4)': 'w' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 19,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 4 ] ] ],
          '4': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 0,
               'node (block 3)': [ 'REF', 3 ],
               'starting (block 3)': 0,
               'char (block 4)': 'w' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 20,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 4 ] ] ],
          '4': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 1,
               'node (block 3)': [ 'REF', 3 ],
               'starting (block 3)': 0 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 15,
       col: 57,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 4 ] ] ],
          '4': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 1,
               'node (block 3)': [ 'REF', 3 ],
               'starting (block 3)': 0,
               'char (block 4)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 16,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 4 ] ] ],
          '4': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 1,
               'node (block 3)': [ 'REF', 3 ],
               'starting (block 3)': 0,
               'char (block 4)': 'h' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 17,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 4 ] ] ],
          '4': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 1,
               'node (block 3)': [ 'REF', 3 ],
               'starting (block 3)': 0,
               'char (block 4)': 'h' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 18,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 6 ] ] ],
          '6': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 1,
               'node (block 3)': [ 'REF', 3 ],
               'starting (block 3)': 0,
               'char (block 4)': 'h' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 19,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 6 ] ] ],
          '6': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 1,
               'node (block 3)': [ 'REF', 5 ],
               'starting (block 3)': 0,
               'char (block 4)': 'h' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 20,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 6 ] ] ],
          '6': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 2,
               'node (block 3)': [ 'REF', 5 ],
               'starting (block 3)': 0 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 15,
       col: 57,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 6 ] ] ],
          '6': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 2,
               'node (block 3)': [ 'REF', 5 ],
               'starting (block 3)': 0,
               'char (block 4)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 16,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 6 ] ] ],
          '6': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 2,
               'node (block 3)': [ 'REF', 5 ],
               'starting (block 3)': 0,
               'char (block 4)': 'a' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 17,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 6 ] ] ],
          '6': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 2,
               'node (block 3)': [ 'REF', 5 ],
               'starting (block 3)': 0,
               'char (block 4)': 'a' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 18,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 8 ] ] ],
          '8': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 2,
               'node (block 3)': [ 'REF', 5 ],
               'starting (block 3)': 0,
               'char (block 4)': 'a' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 19,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 8 ] ] ],
          '8': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 2,
               'node (block 3)': [ 'REF', 7 ],
               'starting (block 3)': 0,
               'char (block 4)': 'a' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 20,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 8 ] ] ],
          '8': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 3,
               'node (block 3)': [ 'REF', 7 ],
               'starting (block 3)': 0 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 15,
       col: 57,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 8 ] ] ],
          '8': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 3,
               'node (block 3)': [ 'REF', 7 ],
               'starting (block 3)': 0,
               'char (block 4)': [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 16,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 8 ] ] ],
          '8': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 3,
               'node (block 3)': [ 'REF', 7 ],
               'starting (block 3)': 0,
               'char (block 4)': 't' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 17,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 8 ] ] ],
          '8': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 3,
               'node (block 3)': [ 'REF', 7 ],
               'starting (block 3)': 0,
               'char (block 4)': 't' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 18,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 3,
               'node (block 3)': [ 'REF', 7 ],
               'starting (block 3)': 0,
               'char (block 4)': 't' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 19,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)',
               'char (block 4)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 3,
               'node (block 3)': [ 'REF', 9 ],
               'starting (block 3)': 0,
               'char (block 4)': 't' } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 20,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: 
             [ 'text',
               'trie',
               'i (block 1)',
               'i (block 2)',
               'node (block 3)',
               'starting (block 3)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 4,
               'node (block 3)': [ 'REF', 9 ],
               'starting (block 3)': 0 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 15,
       col: 57,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie', 'i (block 1)', 'i (block 2)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 4 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 11,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie', 'i (block 1)', 'i (block 2)' ],
            encoded_locals: 
             { text: 'what',
               trie: [ 'REF', 2 ],
               'i (block 1)': 0,
               'i (block 2)': 5 } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 11,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie' ],
            encoded_locals: { text: 'what', trie: [ 'REF', 2 ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 24,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: 'buildTrie',
       stack_to_render: 
        [ { func_name: 'buildTrie',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'buildTrie_f2',
            ordered_varnames: [ 'text', 'trie', '__return__' ],
            encoded_locals: { text: 'what', trie: [ 'REF', 2 ], __return__: [ 'REF', 2 ] } } ],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 24,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ],
          '2': [ 'INSTANCE', '', [ 'w', [ 'REF', 3 ] ] ],
          '3': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 4 ] ],
             [ 'h', [ 'REF', 5 ] ] ],
          '4': [ 'LIST', 0 ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 6 ] ],
             [ 'a', [ 'REF', 7 ] ] ],
          '6': [ 'LIST', 0 ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'indexes', [ 'REF', 8 ] ],
             [ 't', [ 'REF', 9 ] ] ],
          '8': [ 'LIST', 0 ],
          '9': [ 'INSTANCE', '', [ 'indexes', [ 'REF', 10 ] ] ],
          '10': [ 'LIST', 0 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { buildTrie: [ 'REF', 1 ] },
       ordered_globals: [ 'buildTrie' ],
       line: 27,
       col: 18,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'buildTrie',
             'function buildTrie(text) {\n  const trie = {};\n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    let node = trie;\n    const starting = i;\n    \n    while (text[i] && text[i] !== \' \' && text[i] !== \',\' && text[i] !== \'.\') {\n      const char = text[i];\n      node[char] = node[char] || {indexes: []};\n      node[char].indexes.push(starting);\n      node = node[char];\n      i++;\n    }\n  }\n  \n  return trie;\n}',
             null,
             null ] } } ] }
